package com.android.server.ext;

import android.annotation.Nullable;
import android.annotation.StringRes;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManagerInternal;
import android.ext.SettingsIntents;
import android.os.Bundle;
import android.os.Process;
import android.os.SystemClock;
import android.os.UserHandle;
import android.text.TextUtils;
import android.util.LruCache;
import android.util.Slog;

import com.android.internal.R;
import com.android.internal.messages.nano.SystemMessageProto.SystemMessage;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.server.LocalServices;
import com.android.server.pm.pkg.GosPackageStatePm;

import java.util.function.Consumer;

import static com.android.server.ext.SseUtils.addNotifAction;

public class AppExploitProtectionNotification {
    private static final String TAG = "AppExploitProtNotif";

    private static final long SAME_PACKAGE_NOTIF_RATE_LIMIT = 30_000L;

    // packageUid -> notif title resource -> last shown timestamp
    private static final LruCache<Integer, LruCache<Integer, NotifRecord>> lastShownTracker = new LruCache<>(50) {
        protected LruCache<Integer, NotifRecord> create(Integer packageUid) {
            return new LruCache<>(20);
        }
    };

    private static int notifIdSource = SystemMessage.NOTE_APP_EXPLOIT_PROTECTION_BASE;

    static class NotifRecord {
        final int notifId;
        final long timestamp;

        NotifRecord(int notifId, long timestamp) {
            this.notifId = notifId;
            this.timestamp = timestamp;
        }
    }

    public static void maybeShow(Context ctx, String intentAction,
                             int packageUid, String firstPackageName,
                             int gosPsFlagSuppressNotif,
                             @StringRes int notifTitleRes, CharSequence notifText) {
        maybeShow(ctx, intentAction, packageUid, firstPackageName, gosPsFlagSuppressNotif,
                notifTitleRes, notifText, null);
    }

    public static void maybeShow(Context ctx, String intentAction,
                                 int packageUid, String firstPackageName,
                                 int gosPsFlagSuppressNotif,
                                 @StringRes int notifTitleRes, CharSequence notifText,
                                 @Nullable Consumer<Notification.Builder> notifCustomizer) {
        final long timestamp = SystemClock.uptimeMillis();

        int notifId;

        synchronized (lastShownTracker) {
            LruCache<Integer, NotifRecord> map = lastShownTracker.get(Integer.valueOf(packageUid));
            Integer notifTitleB = Integer.valueOf(notifTitleRes);
            NotifRecord notifRecord = map.get(notifTitleB);
            if (notifRecord == null) {
                if (notifIdSource >= SystemMessage.NOTE_APP_EXPLOIT_PROTECTION_MAX) {
                    notifIdSource = SystemMessage.NOTE_APP_EXPLOIT_PROTECTION_BASE;
                }
                notifId = notifIdSource++;
                map.put(notifTitleB, new NotifRecord(notifId, timestamp));
            } else {
                if ((timestamp - notifRecord.timestamp) < SAME_PACKAGE_NOTIF_RATE_LIMIT) {
                    Slog.d(TAG, "rate-limited notification for " + firstPackageName + ": " + intentAction);
                    return;
                }
                notifId = notifRecord.notifId;
                map.put(notifTitleB, new NotifRecord(notifId, timestamp));
            }
        }

        final int userId = UserHandle.getUserId(packageUid);
        final UserHandle user = UserHandle.of(userId);

        var pmi = LocalServices.getService(PackageManagerInternal.class);
        
        ApplicationInfo appInfo = pmi.getApplicationInfo(firstPackageName, 0, Process.SYSTEM_UID, userId);
        if (appInfo == null) {
            Slog.w(TAG, "appInfo null for " + firstPackageName);
            return;
        }
        CharSequence appLabel = appInfo.loadLabel(ctx.getPackageManager());
        if (TextUtils.isEmpty(appLabel)) {
            Slog.w(TAG, "appLabel is empty: " + appLabel + " for " + firstPackageName);
            return;
        }

        var nb = new Notification.Builder(ctx, SystemNotificationChannels.EXPLOIT_PROTECTION);
        nb.setSmallIcon(R.drawable.ic_error);
        nb.setContentTitle(ctx.getString(notifTitleRes, appLabel));
        nb.setContentText(notifText);
        {
            var intent = SettingsIntents.getAppIntent(intentAction, firstPackageName);
            var pi = PendingIntent.getActivityAsUser(ctx, 0, intent,
                    PendingIntent.FLAG_IMMUTABLE, null, user);
            nb.setContentIntent(pi);
        }
        nb.setAutoCancel(true);

        if (notifCustomizer != null) {
            notifCustomizer.accept(nb);
        }

        {
            var args = new Bundle();
            args.putString(Intent.EXTRA_PACKAGE_NAME, firstPackageName);
            args.putParcelable(Intent.EXTRA_USER, user);
            args.putInt(EXTRA_GOSPS_FLAG_SUPPRESS_NOTIF, gosPsFlagSuppressNotif);
            args.putInt(EXTRA_NOTIF_ID, notifId);

            PendingIntent dontShowAgainPi = IntentReceiver.getPendingIntent(NotifActionReceiver.class, ctx, args);

            addNotifAction(ctx, dontShowAgainPi, R.string.notification_action_dont_show_again, nb);
        }
        ctx.getSystemService(NotificationManager.class)
            .notifyAsUser(null, notifId, nb.build(), user);
    }

    static final String EXTRA_GOSPS_FLAG_SUPPRESS_NOTIF = "gosps_flag_suppress_notif";
    static final String EXTRA_NOTIF_ID = "notif_id";

    static class NotifActionReceiver extends IntentReceiver {
        @Override
        public void onReceive(Context ctx, Bundle args) {
            String packageName = args.getString(Intent.EXTRA_PACKAGE_NAME);
            UserHandle user = args.getParcelable(Intent.EXTRA_USER, UserHandle.class);
            int gosPsFlagSuppressNotif = args.getNumber(EXTRA_GOSPS_FLAG_SUPPRESS_NOTIF);

            var pmi = LocalServices.getService(PackageManagerInternal.class);

            GosPackageStatePm.getEditor(pmi, packageName, user.getIdentifier())
                .addFlags(gosPsFlagSuppressNotif)
                .apply();

            int notifId = args.getNumber(EXTRA_NOTIF_ID);

            ctx.getSystemService(NotificationManager.class).cancelAsUser(null, notifId, user);
        }
    }
}
